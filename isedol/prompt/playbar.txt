위 코드는 지금까지 제작한 전체 코드이다. 해당 코드에서 다음 요구사항에 맞춰 수정한다.

PLAYLIST페이지와 playlistAll 페이지 데이터베이스 연결

 playlist페이지와 playlistAll 페이지의 내용을 더미데이터를 사용하는 것이 아닌 연결된 슈퍼베이스 데이터베이스에서 데이터를 가져와서 값을 표시한다. 다음과 같은 기능으로 데이터를 가져와 출력한다, 각각 데이터베이스에 선언된 테이블 구조는 요구사항의 처음으로 작성해놓는다.

create table playlists (
  idx int not null primary key,
  name varchar(30) default '',
  play_list integer[],
  thumbnail varchar(255) default ''
);  

- idx는 기본키 아이디값, name은 playlist의 제목이자 title이자 이름, play_list는 해당 플레이리스트에 저장된 songs의 데이터에 대한 기본키(idx) 값이다. thumbnail은 썸네일 이미지이다.

CREATE TABLE songs (
    idx INT NOT NULL PRIMARY KEY,
    title VARCHAR(255) DEFAULT '',
    thumbnail varcahr(255) default '',
    mp3file varcahr(255) default '',
    odate DATE,
    artist INT REFERENCES artists(idx),
    album_kind INT REFERENCES albumKinds(idx)
);
- idx는 기본키인 아이디값, title은 노래 제목, thumbnail은 해당 노래의 썸네일, mp3file은 mp3 소스, odate는 오픈 날짜, artist는 artists테이블에서 가져온 데이터, album_kind는 albumKinds테이블에서 가져온 값이다.

1. playlist
1) grid의 아이템은 playlists에 존재하는 모든 값을 가져온다.
2) 각 아이템에는 playlists의 idx값을 가진다. 
3) playlist-thumb의 img는 playlists의 thumbnail 값을 적용한다.
4) playlist-name은 playlists의 name값을 출력한다.
5) 아이템을 클릭하여 playlistAll 페이지로 이동하는 경우 아이템에 저장된 playlists의 idx값의 play_list 배열에 정의된 idx값을 가진 songs 테이블에 저장된 값을 출력하는 것이다.

2. playlistAll
1) playlist 페이지에서 클릭한 아이템의 play_list에 존재하는 아이템들의 모든 값을 현재 형태와 같이 전부 출력한다.
2) playlist-all-banner의 이미지 같은 경우 배열의 첫번째 노래의 thumbnail 이미지를 출력한다.
3) playlist-all-header의 h2값은 playlists에 존재하는 name을 사용한다.
4) playlist-all-body의 song-title은 각 노래들의 제목이다.
5) playlist-all-body의 artist는 각 노래들의 artist로 이는 artists 테이블의 외래키 이므로 artists 테이블을 가져와 idx에 맞춰서 정의된 name을 이용한다. 아래는 artists 테이블의 구조이다.

create table artists (
  idx int not null primary key,
  name varchar(30) default ''
);

 위 인덱스를 준수하여 페이지를 만든다. 페이지는 spa방식으로 구현할 것이며 html, css, js를 한 파일에 저장한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다.

=====================================================================
playbar에 적용된 playlist를 수정 및 playlistAll페이지와의 상호작용

 playbar에는 임시로 playlist를 직접 정의하여 사용 중이다. 이를 다음 요구사항에 맞춰 수정한다.

1. playbar 기능 수정
1) playlist안에 정의된 mp3파일은 playlists 테이블에 정의된 play_list의 배열을 사용한다.
2) mp3파일로 구성된 배열이여야 하므로 playlists 테이블의 play_list의 각 인덱스별 정의된 songs 테이블의 idx값으로 mp3file값을 가지고 배열로 만든다.
3) 기본값으로는 playlists 테이블의 idx가 1인 isedol의 play_list를 사용한다.

2. playbar와 playlistAll 페이지와의 상호작용
1) playlistAll 페이지에서 출력되는 노래리스트는 각각 클릭이 가능하다.
2) 클릭하는 경우 playbar의 playlist는 해당 노래가 포함되어 있는 playlists 테이블의 play_list로 사용되며 playlist의 내부 값 들은 1.playbar의 기능에서 정의한 2) 과 같이 mp3파일로 변환하여 저장된다.
3) 노래 재생은 클릭한 노래로 playlist에서 해당 곡의 idx부터 시작된다. 
4) 클릭한 곡의 인덱스 기준으로 시작되며 prev와 next 또한 클릭한 노래가 기준이 된다.

 위 인덱스를 준수하여 페이지를 만든다. 페이지는 spa방식으로 구현할 것이며 html, css, js를 한 파일에 저장한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다. 오류가 있는 경우 다시 요구사항으로 질문할 것이다.

=====================================================================

첨부 파일은 지금까지 제작된 코드의 전체 내용이다. 다음 요구사항에 맞춰 수정한다.

playbar에서 toggleRandom 함수 수정

 toggleRandom 함수를 통해 지금은 랜덤 버튼을 클릭하면 currentPlaylist를 섞는 상태만 만들어져 있다. isRandomMode가 false가 기본값이며 false인 경우와 true인 경우 다음에 명시된 요구사항의 1. 디자인 에 의거하여 수정한다. 기능은 2. 기능수정 에 정의한 요구사항에 맞춰 수정한다. 요구사항에 명시한 기능을 수정하기 위한 내용을 제외하고는 코드를 수정하지 않는다.

playbar의 pb-center에 존재하는 버튼 중 클릭시 toggleRandom 함수가 실행되는 버튼을 랜덤버튼이라 명명한다.

1. 디자인
1) 랜덤버튼에 대한 명시이다.
2) 클릭되기 전에는 기본 이미지의 디자인을 가진다.
3) 클릭되는 경우 즉 isRandomMode변수의 값이 true가 되는 경우 filter: grayscale(100%) hue-rotate(90deg);  이 파라디터를 추가해 초록색으로 변경한다.
4) 다시 클릭하는 경우 즉 isRandomMode변수의 값이 false가 되는 경우 원래 이미지로 되돌린다. 

2. 기능
1) 지금은 랜덤버튼이 클릭되는 경우 currentPlaylist를 랜덤으로 섞는 방법만 적용되어 있다.
2) 새로운 변수를 선언하여 currentPlaylist를 수정하거나 처음 받아올 때 저장한다.
3) 랜덤버튼을 클릭하는 경우 지금과 동일하게 랜덤하게 섞고 이를 currentPlaylist에 할당한다.
4) 랜덤버튼을 다시 클릭하는 경우 섞기 전 currentPlaylist의 값을 가지고 있는 새로운 변수에 할당된 값을 currentPlaylist에 할당한다.
5) 클릭 여부는 isRandomMode변수에 의해 정의되며 기본값은 false로 바로 클릭하는 경우 3)의 내용에 따라 수정되는 이다.


  위 인덱스를 준수하여 기능을 수정한다. 페이지는 spa방식으로 구현한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다. 오류가 나거나 수정이 필요한 부분은 추후 다시 요구할 것이다.

========================================================================
main페이지 award 섹션 수정

 main페이지 award 섹션을 수정한다. 각 카드 당 정보를 다음 요구사항을 바탕으로 수정한다. 요구사항에서 명시한 내용을 제외하고 모든 코드는 수정하지 않는다.

1. 디자인 
1) 각 카드당 2개의 구역을 나누며 좌측에는 img로 가져오는 아이콘, 오른쪽에는 정보를 출력한다.
2) 비율은 1 : 2 의 비율로 구역을 분리한다.

2. 기능
1) 정보를 동적 배열로 받아와 출력한다.
2) v-for 방식으로 배열의 길이만큼 생성한다.
3) 현재 슬라이드 기능은 아무것도 수정하지 않는다. 옳게 동작하고 있다.

  위 인덱스를 준수하여 기능을 수정한다. 페이지는 spa방식으로 구현한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다. 오류가 나거나 수정이 필요한 부분은 추후 다시 요구할 것이다.
========================================================================
admin페이지의 전체 코드이다.

boards 테이블의 데이터를 수정할 때 코드를 수정한다.

boards테이블에서 content라는 컬럼은 text로 정의되어 있다. 여기에는 다양한 글이 작성되야 하며 enter와 같은 기능이 포함되어야 한다. 다음 요구사항을 충족하도록 수정한다.

1. edit의 기능에 대해 수정한다.
2. boards 테이블의 content같은 경우 다음과 같이 수정한다.
3. 현재 content는 한 줄로 작성받는 input이지만 이를 textarea로 수정한다.
4, textarea에 입력받은 내용 중 개행이 존재한다면 여기에 br태그를 추가하여 db에 저장할 것이다.
5. 만일 db에 저장해서 이 내용을 가져올 때 개행을 처리하는 방법이 css로도 가능하다면 연산이 적은 방법을 선택한다.


 위 인덱스에 따라 요구사항에 충족하도록 코드를 수정한다. 수정이 필요한 부분 외에 코드 수정을 금지한다. spa방식으로 페이지 전환이 진행된다. html, css, js의 코드는 한 파일에 존재해야한다. 수정 후 전체 코드를 파일형태로 출력한다.

==========================================================================
1. playbar 수정

playbar의 center에 존재하는 아이콘 중 가장 오른쪽에 존재하는 반복기능을 수정한다.

1) 현재 재생중인 음원만 반목시킨다.


2. playlistall페이지 수정

현재 목록에서 클릭하면 바로 playbar에 전달되어 음원이 재생되는데 이것을 다음 요구사항에 맞춰 수정한다.

1) 목록을 클릭하는 경우 재생이 아닌 음원 정보가 출력되는 모달이 나타난다. 
2) 모달의 가장 우측 상단에는 x로 닫는 버튼이 존재한다. 모달 디자인은 다음과 같다.
2-1) 총 좌, 우로 분류한다.
2-2) 왼쪽은 음원의 정보를 오른쪽은 평가와 다른 노래들의 목록을 스크롤 가능한 형태로 작성될 것이다. 
2-3) 왼쪽에는 songs테이블에 존재하는 데이터를 이용하며 thumbnail, title, odate, artist 순으로 column으로 정렬하여 출력된다.
2-4) artist의 경우 artists 테이블과의 외래키로 artists테이블의 데이터의 idx값으로 저장되어 있는데 이를 이용하여 artists테이블의 idx와 동일한 name을 출력해야한다.
2-5) 오른쪽의 가장 상단에는 재생버튼과 평점과 참여자수가 나타난다. 이는 songs테이블에 존재하는 score컬럼은 평점,  part는 참여자수 값이다. 재생버튼은 playSongFromPlaylist(index) 이 함수를 실행시켜 currentplaylist에 즉 playbar에서 자동으로 실행되도록 만드는 것이다.
2-6) 그 아래에는 1부터5까지 값을 가지는 버튼과 그 오른쪽에 vote버튼이 존재한다. 여기서 1부터 5까지 점수가 들어있던 버튼은 점수, 이를 클릭 후 save버튼을 클릭하는 경우 1부터 5까지 존재한 버튼의 값을 songs테이블의 score에 추가한다. 이 때 part를 1씩 증가시킨다.
2-7) 바로 아래에는 현재 정보를 보고있는 노래를 제외한 songs테이블에 존재하는 모든 노래를 출력한다. 이 때 출력은 썸네일과 제목만 출력한다.
3) 현재 목록을 클릭하면 playbar에 전달하여 노래가 실행되는 방식을 수정하는 것이다.


 위 인덱스를 준수하여 페이지를 만든다. 페이지는 spa방식으로 구현할 것이며 html, css, js를 한 파일에 저장한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다. 오류가 혹은 원치 않는 방향이라면 다시 요구할 것이다.

==========================================================================

song-info-modal 수정

해당 모달에서 우측에 나타나는 목록 중 음악을 선택하면 해당 모달의 정보가 클릭한 음원의 정보로 변경되게 수정하려고 한다. 다음 요구사항에 맞춰 수정한다.

1. song-info-modal의 오른쪽에 존재하는 목록의 존재는 여러 음원 확인 및 해당 음원으로 이동을 위한 것이다.
2. 이 목록에서 음원을 클릭하면 모달의 정보가 클릭한 음원의 정보로 변경된다. 목록에는 해당 음원의 songs테이블의 idx 에 대한 정보가 있어야 한다. 이를 기반으로 가져온다.
3. 모달에서 동작하는 모든 기능은 해당 음원의 정보에 대한 모든 기능이 동작해야한다.
4. play버튼을 클릭하는 경우 해당 음원만 currentplaylist에 존재하게 하여 해당 음원만 재생되도록 한다.

위 요구사항을 충족하기위한 수정을 제외한 모든 기능 및 디자인 수정은 금지하도록 한다. 위 인덱스를 준수하여 페이지를 만든다. 페이지는 spa방식으로 구현할 것이며 html, css, js를 한 파일에 저장한다. 요구사항을 제작하는데 필요한 라이브러리는 cdn 방식으로 가져온다. 디자인은 요구사항을 충족하는 동시에 PC와 모바일간의 UX를 고려하여 구성한다. 수정 혹은 추가가 필요한 코드를 출력하고 어디에 추가해야하는지 출력한다. 오류가 혹은 원치 않는 방향이라면 다시 요구할 것이다.
